type expense @table(name: "expenses") {
  id: String! @pk
  amount: Int
  category: String
  note: String
  occurred_at: Timestamp
  user_id: String
}

type shift @table(name: "shifts") {
  id: String! @pk
  start_time: Timestamp
  end_time: Timestamp
  hourly_rate: Float
  user_id: String
}

type Query {
  expense(id: String!): expense @permission(expression: "user_id == auth.token.uid")
  expense_list(
    limit: Int = 100
    offset: Int = 0
    order_by: [expense_order!]
    where: expense_bool_exp
  ): [expense!]! @permission(expression: "user_id == auth.token.uid")
  shift(id: String!): shift @permission(expression: "user_id == auth.token.uid")
  shift_list(
    limit: Int = 100
    offset: Int = 0
    order_by: [shift_order!]
    where: shift_bool_exp
  ): [shift!]! @permission(expression: "user_id == auth.token.uid")
}

type Mutation {
  expense_insert(
    data: expense_insert_input!
  ): expense @permission(expression: "data.user_id == auth.token.uid")
  expense_update(
    id: String!
    data: expense_update_input!
  ): expense @permission(expression: "query.expense(id: id).user_id == auth.token.uid")
  expense_delete(
    id: String!
  ): expense @permission(expression: "query.expense(id: id).user_id == auth.token.uid")
  shift_insert(
    data: shift_insert_input!
  ): shift @permission(expression: "data.user_id == auth.token.uid")
  shift_update(
    id: String!
    data: shift_update_input!
  ): shift @permission(expression: "query.shift(id: id).user_id == auth.token.uid")
  shift_delete(
    id: String!
  ): shift @permission(expression: "query.shift(id: id).user_id == auth.token.uid")
}
