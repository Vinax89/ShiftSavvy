rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // All user data is nested under /users/{uid}
    match /users/{uid} {
      allow read, write: if isOwner(uid);

      // Transactions
      match /transactions/{txnId} {
        allow read, write: if isOwner(uid);
      }

      // BNPL contracts (current storage)
      match /bnpl/contracts/{contractId} {
        allow read, write: if isOwner(uid);
      }
      match /bnpl/contracts/{contractId}/{sub=**}/{id} {
        allow read, write: if isOwner(uid);
      }

      // BNPL events (audit trail)
      match /bnpl/events/{eventId} {
        allow read, write: if isOwner(uid);
      }

      // Settings (single doc "app")
      match /settings/{docId} {
        allow read, write: if isOwner(uid) && docId == "app";
      }

      // Alerts: user can read / ack; server creates
      match /alerts/{alertId} {
        allow read: if isOwner(uid);
        allow update: if isOwner(uid)
                      && request.resource.data.diff(resource.data)
                          .changedKeys().hasOnly(['ack','ackAt']);
        allow create, delete: if false;
      }
    }

    // Optional: demo collections (lock down for prod)
    // match /shifts/{id} { allow read, write: if false; }
    // match /tax_profiles/{id} { allow read, write: if false; }
  }
}
