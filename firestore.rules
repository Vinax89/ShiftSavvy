
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    
    function isNew() { return !exists(path) }
    function isExisting() { return exists(path) }
    
    // --- User Data ---
    match /users/{uid} {
      allow read, write: if isOwner(uid);
      
      // -- Subcollections --
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(uid);
      }
      
      match /bnpl/contracts/{contractId} {
        allow read, write: if isOwner(uid);
      }

      match /bnpl/contracts/{contractId}/installments/{installmentId} {
         allow read, write: if isOwner(uid);
      }
      
      match /bnpl/contracts/{contractId}/links/{linkId} {
        allow read, write: if isOwner(uid);
      }
      
      match /bnpl/events/{eventId} {
        allow read: if isOwner(uid);
        allow create: if isOwner(uid);
        allow update, delete: if false;
      }
    }
    
    // --- App Data ---
    match /paycheck_estimates/{estimateId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId) && request.resource.data.schemaVersion == 2;
    }
    
    match /transactions/{transactionId} {
      allow read, write: if isOwner(resource.data.userId);
      // create is more complex due to imports, handle with backend logic/roles
    }
    
    match /shifts/{shiftId} {
      allow read, write: if isOwner(resource.data.userId);
    }
    
    match /tax_profiles/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}
